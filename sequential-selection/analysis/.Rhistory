T_resp
length(cue_onset_times)
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		temp <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- temp[[1]]#
		cue_off[cueNum,] <- temp[[2]]#
		last_cue_off<- cue_off#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum,] <- T_resp[cueNum,][T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		temp <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- temp[[1]]#
		cue_off[cueNum,] <- temp[[2]]#
		last_cue_off<- cue_off#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum,] <- T_resp[cueNum,][T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		temp <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- temp[[1]]#
		cue_off[cueNum,] <- temp[[2]]#
		last_cue_off<- cue_off#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum,] <- T_resp[cueNum,][T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		temp <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- temp[[1]]#
		cue_off[cueNum,] <- temp[[2]]#
		last_cue_off<- cue_off#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum] <- T_resp[cueNum,][T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
T_acc
T_resp
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		temp <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- temp[[1]]#
		cue_off[cueNum,] <- temp[[2]]#
		last_cue_off<- cue_off#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum] <- T_resp[cueNum,[T_numbers[cueNum]]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		temp <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- temp[[1]]#
		cue_off[cueNum,] <- temp[[2]]#
		last_cue_off<- cue_off#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
T_acc
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue1_present,nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
T_acc
T_like
T_resp
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
#
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
#
T_like<-temp[[1]]#
T_resp<-temp[[2]]#
T_acc<-temp[[3]]
T_acc
cross(T1_pos,T2offset)
??cross
expand.grid(T1_pos,T2offset)
T1_pos <- 5:13#
T2_offset <- 1:10#
#
expand.grid(T1_pos,T2offset)
T1_pos <- 5:13#
T2_offset <- 1:10#
#
expand.grid(T1_pos,T2_offset)
T1_pos <- 5:13#
T2_offset <- 1:10#
#
output <- expand.grid(T1_pos,T2_offset)#
output$T2_pos <- output$T1_pos + output$T2_offset
> output <- expand.grid(T1_pos,T2_offset)
output
output$T1_pos + output$T2_offset
output
output <- data.frame(expand.grid(T1_pos,T2_offset))
output
output <- data.frame(expand.grid(T1_pos,T2_offset),col.names = c("T1_pos","T2_offset"))
output$T2_pos <- output$T1_pos + output$T2_offset
output
?data.frame()
T1_pos <- 5:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset
output
T1_pos <- 5:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
#
output <- cbind(output,respProb1,respProb2,0,0)
output
T1_pos <- 5:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
#
output <- cbind(output,respProb1,respProb2)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26)] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26)] <- T_resp[2,]#
}
need to get a bank of transitions and make sure that is all correct#
#set up first item as transitions from start#
#then need to get a lag 1 and lag 3 condition to run#
#then figure out if get lag 1 sparing#
#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
	x<-c(x,rep(0,max(lenY-lenX,0)))#
	y<-c(y,rep(0,max(lenX-lenY,0)))#
	shifter = (zeroForY+lenY-1)#
#
	z <- convolve(x, y,FALSE,type = "o")#
	#browser()#
	return(z[(shifter):(shifter+lenX-1)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10)#
#
output <- cbind(output,respProb1,respProb2,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26)] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26)] <- T_resp[2,]#
	output[conditionNum,paste("T2_RelProb",-4:10)] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
output
T_resp[2,]
sum(T_resp[2,])
need to get a bank of transitions and make sure that is all correct#
#set up first item as transitions from start#
#then need to get a lag 1 and lag 3 condition to run#
#then figure out if get lag 1 sparing#
#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
	x<-c(x,rep(0,max(lenY-lenX,0)))#
	y<-c(y,rep(0,max(lenX-lenY,0)))#
	shifter = (zeroForY+lenY-1)#
#
	z <- convolve(x, y,FALSE,type = "o")#
	#browser()#
	return(z[(shifter):(shifter+lenX-1)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10)#
#
output <- cbind(output,respProb1,respProb2,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26)] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26)] <- T_resp[2,]#
	output[conditionNum,paste("T2_RelProb",-4:10)] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
need to get a bank of transitions and make sure that is all correct#
#set up first item as transitions from start#
#then need to get a lag 1 and lag 3 condition to run#
#then figure out if get lag 1 sparing#
#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
	x<-c(x,rep(0,max(lenY-lenX,0)))#
	y<-c(y,rep(0,max(lenX-lenY,0)))#
	shifter = (zeroForY+lenY-1)#
#
	z <- convolve(x, y,FALSE,type = "o")#
	#browser()#
	return(z[(shifter):(shifter+lenX-1)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10)#
#
output <- cbind(output,respProb1,respProb2,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26)] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26)] <- T_resp[2,]#
	output[conditionNum,paste("T2_RelProb",-4:10)] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}
T_resp
cueNum
cue_onset_pdf
plot(cue_onset_pdf,type='l')
lines(cueRes)
lines(cueRes[[1]])
rep(cue_present[cueNum,],nStimuli)
cueNum
cue_present[cueNum,]
lines(cue_present[cueNum,])
rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)
cue_present[cueNum,]
cueRes[[1]]
item_duration_pdf
trans_salient_prob
cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)
cueRes[[1]]
plot(cueRes[[1]])
min(cueRes[[1]])
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}
cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)
plot(cueRes[[1]])
min(cueRes[[1]])
prob_transition
cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)
prob_transition
n
cue_on
min(cue_on)
cue_onset_pdf
min(cue_onset_pdf)
min(prob_transition)
plot(prob_transition)
min(trans_salient_prob)
cue_bank
min(cue_bank)
min(last_off)
Q
trans_bank
temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)
trans_bank <- temp[[1]]
min(trans_bank)
item_duration_pdf
min(item_duration_pdf)
number_transitions
prob_trans_to_salient
t
need to get a bank of transitions and make sure that is all correct#
#set up first item as transitions from start#
#then need to get a lag 1 and lag 3 condition to run#
#then figure out if get lag 1 sparing#
#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
	x<-c(x,rep(0,max(lenY-lenX,0)))#
	y<-c(y,rep(0,max(lenX-lenY,0)))#
	shifter = (zeroForY+lenY-1)#
#
	z <- convolve(x, y,FALSE,type = "o")#
	#browser()#
	return(z[(shifter):(shifter+lenX-1)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	broswer()#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10)#
#
output <- cbind(output,respProb1,respProb2,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26)] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26)] <- T_resp[2,]#
	output[conditionNum,paste("T2_RelProb",-4:10)] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}
need to get a bank of transitions and make sure that is all correct#
#set up first item as transitions from start#
#then need to get a lag 1 and lag 3 condition to run#
#then figure out if get lag 1 sparing#
#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
	x<-c(x,rep(0,max(lenY-lenX,0)))#
	y<-c(y,rep(0,max(lenX-lenY,0)))#
	shifter = (zeroForY+lenY-1)#
#
	z <- convolve(x, y,FALSE,type = "o")#
	#browser()#
	return(z[(shifter):(shifter+lenX-1)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	browser()#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]	#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- 1:10#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26)#
colnames(respProb2)<-paste("T2_RespProb",1:26)#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10)#
#
output <- cbind(output,respProb1,respProb2,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26)] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26)] <- T_resp[2,]#
	output[conditionNum,paste("T2_RelProb",-4:10)] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}
min(item_duration_pdf)
min(item_duration_pdf)n
n
plaplace
install.packages(VGAM)
install.packages("VGAM")
rlaplace(10,location,scale)
library("VGAM")
rlaplace(10,location,scale)
rlaplace(10,location,10)
rlaplace(10,0,10)
plot(rlaplace(100,0,10))
hist(rlaplace(100,0,10))
hist(rlaplace(100,0,.1))
hist(rlaplace(1000,0,.1))
hist(rlaplace(1000,0,.5))
round(rlaplace(10,location,scale))
location = 0 #
scale = .5#
nSamples = 10#
#
#responding with 1 color#
round(rlaplace(10,location,scale))
rbinom(10,.5)
rbinom(10,1,.5)
scale = .5 # higher object saliency (e.g size) should decrease this#
nSamples = 10#
probCorrectObject <- .55 #how discriminable are the two objects#
responseThreshold <- 2#
#
location = 0 #
#responding with 1 color#
colorLocationSample <- round(rlaplace(nSamples,location,scale))#
objectLocationSample <- rbinom(nSamples,1,probCorrectObject) #
table(colorLocationSample,objectLocationSample)
library("VGAM")#
scale = .5 # higher object saliency (e.g size) should decrease this#
nSamples = 10#
probCorrectObject <- .55 #how discriminable are the two objects#
responseThreshold <- 2#
#
location = 0 #
#
#responding with 1 color#
colorLocationSample <- round(rlaplace(nSamples,location,scale))#
objectLocationSample <- rbinom(nSamples,1,probCorrectObject) #
#
table(colorLocationSample,objectLocationSample)
library("VGAM")#
#need to figure out how to get response#
#
scale1 = .5 # higher object saliency (e.g size) should decrease this#
scale2 = .5 # higher object saliency (e.g size) should decrease this#
#
nSamples = 10#
probCorrectObject <- .55 #how discriminable are the two objects#
responseThreshold <- 2#
#
location = 0 #
#
#responding color #1#
colorLocation1Sample <- round(rlaplace(nSamples,location,scale))#
objectLocation1Sample <- rbinom(nSamples,1,probCorrectObject) #
#
#responding color #1#
colorLocation2Sample <- round(rlaplace(nSamples,location,scale))#
objectLocation2Sample <- rbinom(nSamples,1,probCorrectObject) #
#
table(colorLocationSample,objectLocationSample)#
#two possiblities... sample color and matching object independently, or sample the joint. but... they are independent, so going to work out to the same things.
table(colorLocation1Sample,objectLocation1Sample)#
table(colorLocation2Sample,objectLocation2Sample)
scale1 = .5 # higher object saliency (e.g size) should decrease this#
scale2 = .7 # higher object saliency (e.g size) should decrease this#
#
nSamples = 10#
probCorrectObject <- .55 #how discriminable are the two objects#
responseThreshold <- 2#
#
location = 0 #
#
#responding color #1#
colorLocation1Sample <- round(rlaplace(nSamples,location,scale))#
objectLocation1Sample <- rbinom(nSamples,1,probCorrectObject) #
#
#responding color #1#
colorLocation2Sample <- round(rlaplace(nSamples,location,scale))#
objectLocation2Sample <- rbinom(nSamples,1,probCorrectObject) #
#
table(colorLocation1Sample,objectLocation1Sample)#
table(colorLocation2Sample,objectLocation2Sample)
plot(runif(2))
x=runif(1);y=runif(1);plot(x,y,2*x,2*y)
x=runif(1);y=runif(1);plot(c(x,2*x),c(y,2*y)
)
))
x=runif(1);y=runif(1);plot(c(x,2*x),c(y,2*y))
x=runif(1)*2-1;y=runif(1)*2-1;plot(c(x,2*x),c(y,2*y))
x=runif(1)*2-1;y=runif(1)*2-1;plot(c(0,x,2*x),c(0,y,2*y))
1.4 == TRUE
parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long')#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long')
colnames(outputLongT1)
plot(data=outputLongT2,x = T2_offset,y = T1_RelProb, stat="summary",fun.y = mean)
plot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean)
colnames(outputLongT2)
plot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean)
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean)
require(ggplot2)
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean)
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line')
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=T2_pos)
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=time)
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))
qplot(data=outputLongT2,x = T2_offset,y =time, stat="summary",fun.y = mean,geom='line',color=factor(T2_RelProb))
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))
T_resp[1,]
T_acc[1]
T_acc[2]
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long')#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long')#
#
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)
cue_onset_times
plot(cueRes)
cueRes
image(cueRes)
image(as.matrix(cueRes))
image(.matrix(cueRes))
image(matrix(cueRes))
plot(cue_onset_pdf)
cueRes[[1]]
plot(cueRes[[1]])
plot(cueRes[[2]])
plot(cueRes[[1]],type='l')
plot(cue_off[cueNum,])
Q
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)
cue_off
Q
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}
Q
temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)
plot(cue_on)
plot(cue_off)
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	browser()#
	return(cue_present)#
}
n
plot(cue_present,type='l')
plot(cue_on,type='l')
plot(cue_off,type='l')
plot(strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1),type='l')
plot(heaviside(c(-t,0,t),0),type='l')
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}
plot(strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1),type='l')
plot(z)
plot(z,type='l')
plot(z[1:length(x)],type='l')
plot(z)
legnth(x)
length(x)
plot(x)
length(x)
plot(z)
plot(z[1:length(x)],type='l')
plot(z[1:length(x)+zeroForY],type='l')
lines(x)
plot(z[1:length(x)+zeroForY+zeroForX],type='l')
lines(x)
lines(x*10)
lines(x*100)
lines(x*50)
plot(z[1:length(x)+zeroForY+zeroForX],type='l')
lines(cumsum(x))
plot(z[1:length(x)+zeroForY],type='l')
lines(cumsum(x))
plot(z[1:length(x)+zeroForY]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY+zeroForX]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY+zeroForX]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY+zeroForX]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY+zeroForX]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY-1]-cumsum(x),type='l')
plot(z[1:length(x)+zeroForY]-cumsum(x),type='l')
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*cumsum(cue_off)#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long')#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long')#
#
qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long')#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long')#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
outputLongT2$time
outputLongT2$id
?reshape
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 20#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .02#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 30#
#
item_duration_mean = 150#
item_duration_sd = .2#
#
prob_trans_to_salient = .02#
#
gapDuration = 20#
stimDuration = 40#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
number_transitions = 15
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 15#
#
item_duration_mean = 150#
item_duration_sd = .2#
#
prob_trans_to_salient = .02#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 15#
#
item_duration_mean = 150#
item_duration_sd = .2#
#
prob_trans_to_salient = .05#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 15#
#
item_duration_mean = 150#
item_duration_sd = .4#
#
prob_trans_to_salient = .08#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 15#
#
item_duration_mean = 100#
item_duration_sd = .4#
#
prob_trans_to_salient = .08#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5#:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
WHY T1 so bad, add in some sort of plotting of accuracy by position, also plots of what is going on during the trial.#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 60#
#
number_transitions = 15#
#
item_duration_mean = 200#
item_duration_sd = .2#
#
prob_trans_to_salient = .02#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
why shifted so much?#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 40#
#
number_transitions = 15#
#
item_duration_mean = 150#
item_duration_sd = .3#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- 5:13#
T2_offset <- seq(1,7,2)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
T_acc
T_resp
T_like
colSums(T_resp)
rowSums(T_resp)
plot(T_resp)
plot(T_resp[1,])
plot(T_resp[2,])
plot(T_resp[1,])
plot(T_resp[2,])
T_resp[2,(T1_number-4):(T1_number+10)]
round(T_resp[2,(T1_number-4):(T1_number+10)],2)
-4:10
cbind(round(T_resp[2,(T1_number-4):(T1_number+10)],2),-4:10)
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))
add correct answer line toplot, blink way too fast#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 40#
#
number_transitions = 15#
#
item_duration_mean = 150#
item_duration_sd = .3#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- seq(5,10,2)#
T2_offset <- seq(1,7,1)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
add correct answer line toplot, blink way too fast#
require(ggplot2)#
################
#parameter setup#
#
cue_sd = 40#
#
number_transitions = 15#
#
item_duration_mean = 250#
item_duration_sd = .3#
#
prob_trans_to_salient = .2#
#
gapDuration = 20#
stimDuration = 80#
nStimuli = 26#
#
T1_number = 5#
T2_number = 6#
#
######
#
cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
#
cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
T_numbers <- c(T1_number,T2_number)#
#
######
#
t <- 1:((gapDuration+stimDuration)*nStimuli)#
#
stimuliBank <- matrix(0,ncol= length(t),nrow=nStimuli)#
#
for (stimuliNum in 1:nStimuli){#
	stimuliBank[stimuliNum,((stimuliNum-1)*(gapDuration+stimDuration)+1):((stimuliNum-1)*(gapDuration+stimDuration)+stimDuration)]<-1#
}#
#
################
#helper functions#
#
#####
prob_norm<-function(x){ return(x/sum(x))}#
#
#####
heaviside <-function(x,a=0){(sign(x-a)+1)/2}#
#
#####
strippedConvolve<-function(x,y,zeroForX=1,zeroForY=1){#
	#does a convolution and returns output on the scale of the input x#
	#output will be on the timescale of x#
	# # #testing#
	# x = dnorm(seq(-3,3,.01))#
	# y = 0 * x#
	# y[10] = 1#
	# y=y[1:100]#
	# plot(strippedConvolve(x,y,1,10),type='l')#
	# lines(x,col="green")#
	lenX <- length(x)#
	lenY <- length(y)#
#	x<-c(x,rep(0,max(lenY-lenX,0)))#
#	y<-c(y,rep(0,max(lenX-lenY,0)))#
	x2<-c(x,rep(0,lenY+lenX-1))#
	y2<-c(y,rep(0,lenY+lenX-1))#
	shifter = (zeroForY+lenY-1)#
#
	#z <- convolve(x, y,FALSE,type = "o")#
	z <- convolve(x2, rev(y2),type="o")#
	#browser()#
	#return(z[(shifter):(shifter+lenX-1)])#
	z<-z[1:length(x)+zeroForY]#
#
	if (any(z<0)){#
		z<- z-min(z)#
	}#
		if (sum(z)>1){#
		z<- prob_norm(z)#
	}#
	if (any(z<0)){#
		browser()#
	}#
	return(z[1:length(x)])#
}#
#
#####
get_cue_present<-function(cue_on, cue_off,t){#
#given the probability of a cue onset and offset, finds the probability of an active cue at each point in time#
	#cue_present <- strippedConvolve(cue_on, heaviside(c(-t,0,t),0),1,length(t)+1)*strippedConvolve(cue_off, 1-heaviside(c(-t,0,t),0),1,length(t)+1)#
	cue_present <- cumsum(cue_on)*(1-cumsum(cue_off))#
	#cue_present = prob_norm(cue_present) does not need to sum to 1, not the probability of a singluar event#
#
	#browser()#
	return(cue_present)#
}#
#
#####
#transition time bank#
make_transition_bank<-function(item_duration_pdf,number_transitions,prob_trans_to_salient,t){#
	transition_bank = matrix(data = NA, nrow  = number_transitions, ncol = length(t))#
	transition_bank_prob_salient = matrix(data = NA, nrow  = 1, ncol = number_transitions)#
	transition_bank[1,] <- item_duration_pdf#
	#plot(transition_bank[1,],type='l')#
	transition_bank_prob_salient[1] <- prob_trans_to_salient#
	for (number in 2:number_transitions){#
		transition_bank[number,]<- strippedConvolve(transition_bank[number-1,],item_duration_pdf)#
		#lines(transition_bank[number,])#
		transition_bank_prob_salient[number]<-prob_trans_to_salient*(1-prob_trans_to_salient)^(number-1)#
		#browser()#
	}#
	return(list(transition_bank,transition_bank_prob_salient))#
}#
#
#want to evaluate transition time bank for given start distribution#
update_bank<-function(transition_bank, last_item_off){#
	for (number in 1:nrow(transition_bank)){#
		transition_bank[number,]<-strippedConvolve(transition_bank[number,],last_item_off)#
	}	#
	return(transition_bank)#
}#
#
#get probability of cue being on#
get_prob_cue_on <- function( cue_onset_pdf, cue_offset_pdf,last_off, item_duration_pdf , trans_salient_prob, trans_bank){#
	cue_bank <- update_bank(trans_bank, last_off)#
#this gives you the probability of a salient item, after any number of transitions, at each point in time#
	prob_transition <- as.numeric(trans_salient_prob %*% cue_bank)#
	#browser()#
	#the cumulative sum is the probability that will have transitioned by that time point.#
	#the cue onset is the probability that the cue will be percieved at each time point#
	cue_on =prob_norm(cue_onset_pdf*cumsum(prob_transition))#
	cue_off = prob_norm(strippedConvolve(cue_on, item_duration_pdf)*cue_offset_pdf)#
	#browser()#
	cue_present<-get_cue_present(cue_on, cue_off,t)#
	return(list(cue_present,cue_off))#
}#
#
#now need to evauluate probability of saliency at any point in time. each transition can be to either a salient or non salient item. the probability of going to a salient item is just a parameter, and the probability of salient item is that parameter times, #
#
#given everything known at the start want proabilty of transitioning to a salient item at each time point#
#what is the probability of #
#
################
#meat#
#
runCondition<-function(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank){#
	item_duration_pdf =  dlnorm(t,log(item_duration_mean),item_duration_sd)#
	item_duration_cdf =  plnorm(t,log(item_duration_mean),item_duration_sd)#
	nStimuli = nrow(stimuliBank)#
	temp <- make_transition_bank(item_duration_pdf,number_transitions,prob_trans_to_salient,t)#
	trans_bank <- temp[[1]]#
	trans_salient_prob <- temp [[2]]#
#
	start_trial=rep(0,length(t))#
	start_trial[1]<-1#
#
	last_cue_off <- start_trial#
#
	cue_present <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))#
	cue_off <- matrix(0,nrow = length(cue_onset_times),ncol = length(t))		#
	T_like <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_resp <- matrix(0,nrow = length(cue_onset_times),ncol = nStimuli)		#
	T_acc <- rep(0,length(cue_onset_times))#
	for (cueNum in 1:length(cue_onset_times)){#
		#setup cue onset, offset, and duration distributions#
		cue_onset_pdf = dnorm(t,cue_onset_times[cueNum],cue_sd)#
		cue_offset_pdf = dnorm(t,cue_offset_times[cueNum],cue_sd)#
		cueRes <-get_prob_cue_on( cue_onset_pdf, cue_offset_pdf, last_cue_off, item_duration_pdf , trans_salient_prob, trans_bank)#
		cue_present[cueNum,] <- cueRes[[1]]#
		cue_off[cueNum,] <- cueRes[[2]]#
		last_cue_off<- cue_off[cueNum,]#
	}#
	#note the presence of T2 doesn't affect that of T1... #
	for (cueNum in 1:length(cue_onset_times)){#
		#browser()#
		T_like[cueNum,] <- rowSums(matrix(rep(cue_present[cueNum,],nStimuli),nrow=nStimuli,byrow=TRUE)*stimuliBank)	#
		T_resp[cueNum,] <- T_like[cueNum,]/sum(T_like[cueNum,])#
#
		if (any(T_resp[cueNum,]<0)){#
			browser()#
		}#
		T_acc[cueNum] <- T_resp[cueNum,T_numbers[cueNum]]#
	}#
	#browser()#
	return(list(T_like,T_resp,T_acc))#
}#
T1_pos <- seq(5,10,2)#
T2_offset <- seq(1,7,1)#
#
output <- data.frame(expand.grid(T1_pos,T2_offset))#
colnames(output)<- c("T1_pos","T2_offset")#
output$T2_pos <- output$T1_pos + output$T2_offset #
#
output$T1_acc <-NULL#
output$T2_acc <-NULL#
#
respProb1 <- matrix(0,nrow = nrow(output), ncol = 26)#
respProb2 <- respProb1#
respT2RelT1 <- matrix(0,nrow = nrow(output), ncol = 15)#
respT1RelT1 <- matrix(0,nrow = nrow(output), ncol = 10)#
#
colnames(respProb1)<-paste("T1_RespProb",1:26,sep="_")#
colnames(respProb2)<-paste("T2_RespProb",1:26,sep="_")#
colnames(respT1RelT1)<-paste("T1_RelProb",-4:5,sep="_")#
colnames(respT2RelT1)<-paste("T2_RelProb",-4:10,sep="_")#
#
output <- cbind(output,respProb1,respProb2,respT1RelT1,respT2RelT1)#
#
for (conditionNum in 1:nrow(output)){#
	T1_number = output[conditionNum,"T1_pos"]#
	T2_number = output[conditionNum,"T2_pos"]#
	######
	cue1_onset_time = (T1_number-1)*(gapDuration+stimDuration)+1#
	cue1_offset_time = ((T1_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue2_onset_time = (T2_number-1)*(gapDuration+stimDuration)+1#
	cue2_offset_time = ((T2_number-1)*(gapDuration+stimDuration)+stimDuration)#
	cue_onset_times<-c(cue1_onset_time,cue2_onset_time)#
	cue_offset_times<-c(cue1_offset_time,cue2_offset_time)#
	T_numbers <- c(T1_number,T2_number)#
	temp<- runCondition(t,T_numbers,cue_onset_times,cue_offset_times,cue_sd,item_duration_mean,item_duration_sd,number_transitions,prob_trans_to_salient,stimuliBank)#
	T_like<-temp[[1]]#
	T_resp<-temp[[2]]#
	T_acc<-temp[[3]]#
	output[conditionNum,"T1_acc"] <- T_acc[1]#
	output[conditionNum,"T2_acc"] <- T_acc[2]#
	output[conditionNum,paste("T1_RespProb",1:26,sep="_")] <- T_resp[1,]#
	output[conditionNum,paste("T2_RespProb",1:26,sep="_")] <- T_resp[2,]#
	output[conditionNum,paste("T1_RelProb",-4:5,sep="_")] <-  T_resp[1,(T1_number-4):(T1_number+5)]#
	output[conditionNum,paste("T2_RelProb",-4:10,sep="_")] <- T_resp[2,(T1_number-4):(T1_number+10)]#
}#
#
# # #
# #########
#
outputLongT1 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T1_RelProb",-4:5,sep="_"))], varying = list(paste("T1_RelProb",-4:5,sep="_")),v.names = c("T1_RelProb"),direction = 'long', times = -4:5)#
#
outputLongT2 <- reshape(output[,c("T1_pos", "T2_offset", "T2_pos",paste("T2_RelProb",-4:10,sep="_"))], varying = list(paste("T2_RelProb",-4:10,sep="_")),v.names = c("T2_RelProb"),direction = 'long', times = -4:10)#
#
#qplot(data=outputLongT2,x = T2_offset,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(time))#
qplot(data=outputLongT2,x = time,y = T2_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))#
#now need to plot these, and figure out why accuracy is wrong#
# #the start of the next item#
# next_start <- cue_off#
#
# #the probability of the next start and being salient#
# next_start_salient <- next_start*prob_trans_to_salient#
#
# #the probability of the next start and being non-salient#
# next_start_nonsalient <- next_start*(1-prob_trans_to_salient)#
#
# #the probability of the next start and being salient, also considering perceptual info... shouldn't this just be a multiplication? yes!#
# next_start_salient_sum =next_start_salient*cue2_onset_pdf#
#
# #plot(next_start,type='l')#
# #lines(next_start_salient_sum,col='red')#
#
# cue2_on <- prob_norm(next_start_salient_sum)#
# cue2_off = prob_norm(strippedConvolve(cue2_on, item_duration_pdf))#
# cue_present <- get_cue_present(cue_on,cue_off,t)#
# cue2_present <- get_cue_present(cue2_on,cue2_off,t)#
# ###plot some stuff#
#
# plot(cue_present,type='l')#
# lines(cue2_present)#
# lines(cue2_off,col="red")#
# lines(cue_off,col="red")#
# lines(cue2_on,col="red")#
# lines(cue_on,col="red")
qplot(data=outputLongT1,x = time,y = T1_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T2_offset))
qplot(data=outputLongT1,x = time,y = T1_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T1_offset))
qplot(data=outputLongT1,x = time,y = T1_RelProb, stat="summary",fun.y = mean,geom='line',color=factor(T1_pos))
data<-NULL#
#
showPlot<-function(matrix_to_show){image(sqrt(matrix(rev(matrix_to_show),nrow=10,byrow=TRUE)[(10:1),] ),col=gray((0:128)/128))}#
#
for (file in list.files())#
#
if ("1"==substr(file,nchar(file)-4,nchar(file)-4)){#
	subjMain <- read.csv(file)#
	if (nrow(subjMain)>=200){#
		subjectName <- substr(file,7,nchar(file)-6)#
		subjMain$subjectID <- subjectName#
		if ("offsett" %in% colnames(subjMain) & !("offset" %in% colnames(subjMain))){#
			subjMain$offset <- subjMain$offsett#
			subjMain$offset2 <- 0#
			subjMain$offsett <- NULL#
		}#
#
		if (ncol(subjMain)==17){#
			subjMain$offset <- 0#
			subjMain$offset2 <- 0#
			subjMain$version <- subjMain$bars.or.spot - 2#
			subjMain$actualStimOn <- NA#
		}#
		print(ncol(subjMain))#
		if(ncol(subjMain) <= 20 & is.null(subjMain$version)){#
			if (subjMain$offset[1] == 3.75){#
				subjMain$version = 1 #
			}else if(subjMain$offset[1] == 5){#
				subjMain$version = 2#
			}else if(subjMain$offset[1] == 5.5){#
				subjMain$version = 3#
			}else if(subjMain$offset[1] == 4.5){#
				subjMain$version = 4#
			}else if(subjMain$offset[1] == -10.5){#
				subjMain$version = 5#
			}else if(subjMain$offset[1] == -9){#
				subjMain$version = 6#
			}else if(subjMain$offset[1] == 0){#
				print("1")#
			}else{#
				browser()#
				print (subjMain$offset[1])#
			}#
		}#
#		print (subjMain$offset[1])#
		#print (ncol(subjMain) )#
		data<-rbind(data,subjMain)		#
	}#
#
}#
#
table(data$version)#
temp<-aggregate(data=data,rep(1,nrow(data))~version+subjectID,min)#
table(temp$version)	#
#
data$resp.v.pos <- as.numeric(data$resp.v.pos)#
data$resp.h.pos <- as.numeric(data$resp.h.pos)#
data$resp.v.hv <- as.numeric(data$resp.v.hv)#
data$resp.h.hv <- as.numeric(data$resp.h.hv)#
#
data <- subset(data, data$version %in% c(-1,0,1,2,5,6,8,9,11,12))#
#
data$outerCorrect <- data$resp.h.pos==0 & data$resp.h.hv==1#
data$innerCorrect <- data$resp.v.pos==0 & data$resp.v.hv==2#
#
data$anyCorrect <- data$outerCorrect | data$innerCorrect#
data$allCorrect <- data$outerCorrect & data$innerCorrect#
#
data$outerResp.outer.minus2 <- data$resp.h.pos==-2 & data$resp.h.hv==1#
data$outerResp.outer.minus1 <- data$resp.h.pos==-1 & data$resp.h.hv==1#
data$outerResp.outer.0 <- data$resp.h.pos==0 & data$resp.h.hv==1 #correct#
data$outerResp.outer.plus1 <- data$resp.h.pos==1 & data$resp.h.hv==1#
data$outerResp.outer.plus2 <- data$resp.h.pos==2 & data$resp.h.hv==1#
#
data$outerResp.inner.minus2 <- data$resp.h.pos==-2 & data$resp.h.hv==2#
data$outerResp.inner.minus1 <- data$resp.h.pos==-1 & data$resp.h.hv==2#
data$outerResp.inner.0 <- data$resp.h.pos==0 & data$resp.h.hv==2#
data$outerResp.inner.plus1 <- data$resp.h.pos==1 & data$resp.h.hv==2#
data$outerResp.inner.plus2 <- data$resp.h.pos==2 & data$resp.h.hv==2#
#
data$innerResp.outer.minus2 <- data$resp.v.pos==-2 & data$resp.v.hv==1#
data$innerResp.outer.minus1 <- data$resp.v.pos==-1 & data$resp.v.hv==1#
data$innerResp.outer.0 <- data$resp.v.pos==0 & data$resp.v.hv==1#
data$innerResp.outer.plus1 <- data$resp.v.pos==1 & data$resp.v.hv==1#
data$innerResp.outer.plus2 <- data$resp.v.pos==2 & data$resp.v.hv==1#
#
data$innerResp.inner.minus2 <- data$resp.v.pos==-2 & data$resp.v.hv==2#
data$innerResp.inner.minus1 <- data$resp.v.pos==-1 & data$resp.v.hv==2#
data$innerResp.inner.0 <- data$resp.v.pos==0 & data$resp.v.hv==2 #correct#
data$innerResp.inner.plus1 <- data$resp.v.pos==1 & data$resp.v.hv==2#
data$innerResp.inner.plus2 <- data$resp.v.pos==2 & data$resp.v.hv==2#
#
#matching objects at each position#
#
data$CorrectObjectMatching.minus2 <- data$outerResp.outer.minus2 & data$innerResp.inner.minus2#
data$CorrectObjectMatching.minus1 <- data$outerResp.outer.minus1 & data$innerResp.inner.minus1#
data$CorrectObjectMatching.0 <- data$outerResp.outer.0 & data$innerResp.inner.0#
data$CorrectObjectMatching.plus1 <- data$outerResp.outer.plus1 & data$innerResp.inner.plus1#
data$CorrectObjectMatching.plus2 <- data$outerResp.outer.plus2 & data$innerResp.inner.plus2#
#
data$FlippedObjectMatching.minus2 <- data$outerResp.inner.minus2 & data$innerResp.outer.minus2#
data$FlippedObjectMatching.minus1 <- data$outerResp.inner.minus1 & data$innerResp.outer.minus1#
data$FlippedObjectMatching.0 <- data$outerResp.inner.0 & data$innerResp.outer.0#
data$FlippedObjectMatching.plus1 <- data$outerResp.inner.plus1 & data$innerResp.outer.plus1#
data$FlippedObjectMatching.plus2 <- data$outerResp.inner.plus2 & data$innerResp.outer.plus2#
#
#how often do they correctly match objects at incorrect positions#
#
data$CorrectMatchingOnIncorrectTrials <- data$CorrectObjectMatching.minus2 | data$CorrectObjectMatching.minus1| data$CorrectObjectMatching.plus1 | data$CorrectObjectMatching.plus2#
#
data$FlippedMatchingOnIncorrectTrials <- data$FlippedObjectMatching.minus2 | data$FlippedObjectMatching.minus1 | data$FlippedObjectMatching.plus1 | data$FlippedObjectMatching.plus2#
#
#matched at all on incorrect trials#
#
data$AnyMatchingOnIncorrectTrials <- data$FlippedMatchingOnIncorrectTrials | data$CorrectMatchingOnIncorrectTrials#
#
require(ggplot2)#
#
tapply(data$CorrectMatchingOnIncorrectTrials,data$version,sum)/tapply(data$AnyMatchingOnIncorrectTrials,data$version,sum)#
#
tapply(data$AnyMatchingOnIncorrectTrials,data$version,sum)/tapply(data$offset,data$version,length)#
#
dataAggr<-aggregate(data=data, cbind(AnyMatchingOnIncorrectTrials,FlippedMatchingOnIncorrectTrials,CorrectMatchingOnIncorrectTrials)~subjectID+version,sum)#
#
#PLOT HISTOGRAMS#
qplot(data = dataAggr, x = CorrectMatchingOnIncorrectTrials/AnyMatchingOnIncorrectTrials,geom='histogram')+facet_grid(.~version)#
dataAggr$propCorrectMatchingOnIncorrectTrials<- dataAggr$CorrectMatchingOnIncorrectTrials / dataAggr$AnyMatchingOnIncorrectTrials#
#
#TTEST FOR EACH #
for (versionNum in -1:12){#
	print(versionNum)#
	try(#
	print(t.test(subset(dataAggr,dataAggr$version==versionNum)$propCorrectMatchingOnIncorrectTrials,mu = .5))#
	)#
}#
#
aggrData <- aggregate(data= data, cbind(outerResp.outer.minus2,outerResp.outer.minus1,#
outerResp.outer.0,outerResp.outer.plus1,outerResp.outer.plus2,#
outerResp.inner.minus2,outerResp.inner.minus1,outerResp.inner.0,#
outerResp.inner.plus1,outerResp.inner.plus2,innerResp.outer.minus2,#
innerResp.outer.minus1,innerResp.outer.0,innerResp.outer.plus1,#
innerResp.outer.plus2,innerResp.inner.minus2,innerResp.inner.minus1,#
innerResp.inner.0,innerResp.inner.plus1,innerResp.inner.plus2) ~ version,mean)#
#
varyingNames <- outer(outer(c("innerResp","outerResp"),c("inner","outer"),paste,sep="."),c("minus2","minus1","0","plus1","plus2"),paste,sep=".")#
#
aggrDataRes <- reshape(aggrData,direction="long",varying = varyingNames,v.names = c("innerResp","outerResp"),times =as.vector(outer(c("inner","outer"),c("minus2","minus1","0","plus1","plus2"),paste,sep=".")))#
#
aggrDataRes$outerOrInner <- substring(aggrDataRes$time,1,5)#
aggrDataRes$position <- factor(substring(aggrDataRes$time,7,100),levels = c("minus2","minus1","0","plus1","plus2"), ordered = TRUE)#
aggrDataRes$positionNum <- unclass (aggrDataRes$position)-3#
#
#PLOT RESPONSE CURVES#
quartz()#
qplot(data = aggrDataRes, x = positionNum, y = innerResp, color = outerOrInner, geom = c("line"))+facet_wrap("version")+coord_cartesian(ylim = c(0,.5))#
quartz()#
qplot(data = aggrDataRes, x = positionNum, y = outerResp, color = outerOrInner, geom = c("line"))+facet_wrap("version")+coord_cartesian(ylim = c(0,.5))#
#table(data$subjectID)#
#data$totalTrials = 1#
#totalTrials <-aggregate(data=data,totalTrials~subjectID,sum)#
#data$totalTrials = NULL#
#data <- merge(data,totalTrials,all=TRUE)#
#
source('model_4.R')#
#
for (versionNum in c(-1,0,1,2,5,6,8,9,11,12)){#
	dataVersion <- subset(data,data$version == versionNum)#
	imageMatrix <- matrix(0,10,10)#
	for (rowNum in 1:nrow(dataVersion)){#
#
		horizRespIdx <- dataVersion[rowNum,"resp.h.pos"]+3 + (dataVersion[rowNum,"resp.h.hv"]-1)*5#
		vertRespIdx <- dataVersion[rowNum,"resp.v.pos"]+3 + (dataVersion[rowNum,"resp.v.hv"]-1)*5#
		imageMatrix[horizRespIdx,vertRespIdx] = imageMatrix[horizRespIdx,vertRespIdx] + 1/nrow(dataVersion)		#
	}#
	quartz()#
	image(sqrt(matrix(rev(imageMatrix),nrow=10,byrow=TRUE)[(10:1),] ),col=gray((0:128)/128))#
	result <- optim(par = c(0.15,.25,.5,.35,.5,1,1.2,.05), fn = fitBindingModel, data = imageMatrix)#
	print(result$par)#
	fitBindingModel(result$par,data = imageMatrix, plot = TRUE)#
}#
if (False){#
#for each subject... #
for (versionNum in c(-1,0,1,2,5,6,8,9)){#
for (sub in unique(data$subjectID)){#,1,2,5,6,8,9)){	#
	dataVersion <- subset(data,data$version == versionNum & data$subjectID == sub)#
	imageMatrix <- matrix(0,10,10)#
	print(sub)#
	for (rowNum in 1:nrow(dataVersion)){#
#
		horizRespIdx <- dataVersion[rowNum,"resp.h.pos"]+3 + (dataVersion[rowNum,"resp.h.hv"]-1)*5#
		vertRespIdx <- dataVersion[rowNum,"resp.v.pos"]+3 + (dataVersion[rowNum,"resp.v.hv"]-1)*5#
		imageMatrix[horizRespIdx,vertRespIdx] = imageMatrix[horizRespIdx,vertRespIdx] + 1	#
	}#
	print(imageMatrix)#
}#
}#
}
source('model_4.R')#
#
for (versionNum in c(-1,0,1,2,5,6,8,9,11,12)){#
	dataVersion <- subset(data,data$version == versionNum)#
	imageMatrix <- matrix(0,10,10)#
	for (rowNum in 1:nrow(dataVersion)){#
#
		horizRespIdx <- dataVersion[rowNum,"resp.h.pos"]+3 + (dataVersion[rowNum,"resp.h.hv"]-1)*5#
		vertRespIdx <- dataVersion[rowNum,"resp.v.pos"]+3 + (dataVersion[rowNum,"resp.v.hv"]-1)*5#
		imageMatrix[horizRespIdx,vertRespIdx] = imageMatrix[horizRespIdx,vertRespIdx] + 1/nrow(dataVersion)		#
	}#
	quartz()#
	image(sqrt(matrix(rev(imageMatrix),nrow=10,byrow=TRUE)[(10:1),] ),col=gray((0:128)/128))#
	result <- optim(par = c(0.15,.25,.5,.35,.5,1,1.2,.05), fn = fitBindingModel, data = imageMatrix)#
	print(result$par)#
	fitBindingModel(result$par,data = imageMatrix, plot = TRUE)#
}#
if (False){#
#for each subject... #
for (versionNum in c(-1,0,1,2,5,6,8,9)){#
for (sub in unique(data$subjectID)){#,1,2,5,6,8,9)){	#
	dataVersion <- subset(data,data$version == versionNum & data$subjectID == sub)#
	imageMatrix <- matrix(0,10,10)#
	print(sub)#
	for (rowNum in 1:nrow(dataVersion)){#
#
		horizRespIdx <- dataVersion[rowNum,"resp.h.pos"]+3 + (dataVersion[rowNum,"resp.h.hv"]-1)*5#
		vertRespIdx <- dataVersion[rowNum,"resp.v.pos"]+3 + (dataVersion[rowNum,"resp.v.hv"]-1)*5#
		imageMatrix[horizRespIdx,vertRespIdx] = imageMatrix[horizRespIdx,vertRespIdx] + 1	#
	}#
	print(imageMatrix)#
}#
}#
}
