xy = xy/sqrt(rowSums(xy^2))
return(colMeans(xy))
}
mean.normal = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))
return(colMeans(xy))
}
xy.mu = mean.normal(coef.samples[,c(2,3)])
xy.k = (n-1)/(1-sqrt(sum(xy.mu^2)))
n = nrow(coef.samples)
xy.k = (n-1)/(1-sqrt(sum(xy.mu^2)))
xy.k
xy.mu
sqrt(sum(xy.mu^2))
xy.mu
angles = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))
return(180/pi*atan2(xy[,1], xy[,2]))
}
hist(angles(coef.samples[,c(2,3)]))
k = (n-1)/(nrow(coef.samples)-sqrt(sum((n*xy.mu)^2)))
k
xy.k = (n-1)/(1-sqrt(sum(xy.mu^2)))/n
xy.k
??bessel
r.sq = sum(xy.mu^2)
n/(n-1)*(r.sq-1/n)
k
r.sq
besselI(164,)
besselI(164,1)
besselI(164,0)
xy.k
1/xy.k
sqrt(1/xy.k)
l = sqrt(sum(xy.mu^2))
l
sqrt(2*(1-l))
sqrt(-2*log(l))
sqrt(-2*log(l))/pi*180
mean.normal = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)    # normalize to be upper right or lower right quadrant
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))  # normalize to unit vectors
return(colMeans(xy))   # get mean unit vector
}
xy.mu = mean.normal(coef.samples[,c(2,3)])
xy.angle = atan2(xy.mu[,1], xy.mu[,2])
# circular sd
xy.length = sqrt(sum(xy.mu^2))
xy.sd = sqrt(2*(1-xy.length)) # alternatively: sqrt(-2*log(xy.length)) ... should be very similar.
# in degrees, cause they are more intuitive:
xy.angle = 180/pi*xy.angle
xy.sd = 180/pi*xy.sd
xy.mu
atan2(xy.mu[1], xy.mu[2])
xy.mu = mean.normal(coef.samples[,c(2,3)])
xy.angle = atan2(xy.mu[1], xy.mu[2])
# circular sd
xy.length = sqrt(sum(xy.mu^2))
xy.sd = sqrt(2*(1-xy.length)) # alternatively: sqrt(-2*log(xy.length)) ... should be very similar.
# in degrees, cause they are more intuitive:
xy.angle = 180/pi*xy.angle
xy.sd = 180/pi*xy.sd
xy.sd
xy.angle
data = df
names(data)
names(data) <- c('x', 'y', 'response')
M = glm(data, response~x+y, family=binomial)
coef.means = coef(M)
b.0 = coef.means[1]
b.x = coef.means[2]
b.y = coef.means[3]
# b.x and b.y is the best-estimate to the normal to the classification boundary.
# The the classification boundary is given by
# 0=(intercept)+b.x*x + b.y*y
# consequently, you can get the classification boundary line as:
# y = -1*b.0/b.y - b.x/b.y * x
# y = a+b*x
a = -b.0/b.y
b = - b.x/b.y
# that's enough to get an estimate of the classification boundary.
# but it's tricky to get a confidence interval on b because there's not an analytical solution to the product of two normal variables, or the angle that it describes...
# moreover, b is going to be very unstable when the classification boundary is straight up and down.  For this purpose you should use some circular statistics.
# But getting confidence intervals on circular statistics is a bit tricky, and can be accomplished most easily via bootstrapping.
# We can get bootstrap samples of the coefficients using the coefficient estimate and covariance.
n = 10000 # number of bootstrapped samples
# should use full coefficient covariance matrix.
coef.covariance = vcov(M)
coef.samples = MASS::mvrnorm(10000, coef.means, coef.covariance)
# from there you can do various circular statistics on the vectors coef.samples[,c(2,3)]
# (which are samples of the normal to the classification boundary)
mean.normal = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)    # normalize to be upper right or lower right quadrant
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))  # normalize to unit vectors
return(colMeans(xy))   # get mean unit vector
}
xy.mu = mean.normal(coef.samples[,c(2,3)])
xy.angle = atan2(xy.mu[1], xy.mu[2])
# circular sd
xy.length = sqrt(sum(xy.mu^2))
xy.se = sqrt(2*(1-xy.length)) # alternatively: sqrt(-2*log(xy.length)) ... should be very similar.
# in degrees, cause they are more intuitive:
xy.angle = 180/pi*xy.angle
xy.se = 180/pi*xy.se
# so we get an angle estimate (for the classification boundary normal!) on the interval [0,180], and an approximate standard error for that angle.  Note of course that 0==180
xy.se
xy.angle
angles = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))
return(180/pi*atan2(xy[,1], xy[,2]))
}
angles(coef.samples[,c(2,3)])
xy.angles = angles(coef.samples[,c(2,3)])
cut(xy.angles, breaks = c(-1, 45/2, 45+45/2, 90+45/2, 135+45/2, 182), labels=('horizontal', '45', 'vertical', '135', 'horizontal'))
cut(xy.angles, breaks = c(-1, 45/2, 45+45/2, 90+45/2, 135+45/2, 182), labels=c('horizontal', '45', 'vertical', '135', 'horizontal'))
xy.class = cut(xy.angles, breaks = c(-1, 45/2, 45+45/2, 90+45/2, 135+45/2, 182), labels=c('horizontal', '45', 'vertical', '135', 'horizontal'))
xy.class = as.character(cut(xy.angles, breaks = c(-1, 45/2, 45+45/2, 90+45/2, 135+45/2, 182), labels=c('horizontal', '45', 'vertical', '135', 'horizontal')))
xy.class
table(xy.class)
table(xy.class)/n
str(table(xy.class))
as.matrix(table(xy.class))
as.matrix(table(xy.class))/n
angles = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))
return(180/pi*atan2(xy[,1], xy[,2]))
}
angles = function(xy){
d = ifelse((xy[,1]*xy[,2])>0, 1, -1)
xy = cbind(abs(xy[,1]), d*abs(xy[,2]))
xy = xy/sqrt(rowSums(xy^2))
return(180/pi*atan2(xy[,1], xy[,2]))
}
xy.class = as.character(cut(xy.angles, breaks = c(-1, 45/2, 45+45/2, 90+45/2, 135+45/2, 182), labels=c('horizontal', '45', 'vertical', '135', 'horizontal')))
as.matrix(table(xy.class))/n
matrix(c(7, 3, 4, 4), nrow=2)
chisq.test(matrix(c(7, 3, 4, 4), nrow=2))
source('~/ACADEMIC/Students/Killeen-Isabella/roc.seq.elim.R')
df
k = 10000 # number of simulated trials in each present/absent condition
alternatives = 6
# generate "familiarities" of {alternatievs} items for {k} trials
d.prime = 2
# proportion of the familiarity variance that is "shared" by all items in a trial.
# if set very close to 0, advantage of smart-simultaneous goes away
# it will even do worse given the extra sample-variance of subtracted mean.
# (0 and 1 are illegal)
p.s.w = 0.3
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime, rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
getPerfSeq = function(cut){
present.over = st.present>cut
# correct hit arises when target is over threshold AND is max of all elements.
p.hit = mean(present.over[,1] & apply(st.present, 1, which.max)==1)
p.fa.present = mean(apply(present.over,1,sum)>0 & apply(st.present, 1, which.max)!=1)
absent.over = st.absent>cut
# fa arises if at least one stimulus in absent trial is over threshold
# divided by 6...
p.fa =  mean(apply(absent.over, 1, sum)>0)/6
return(data.frame(type="simultaneous", cut, p.hit, p.fa, p.fa.present))
}
getMaxZ = function(items){
item.mx = max(items)
item.other = items[-which.max(items)]
mu.other = mean(item.other)
return((item.mx - mu.other))
}
getPerfSmart = function(z.cut){
max.is.targ = apply(st.present, 1, which.max)==1
max.z.present = apply(st.present, 1, getMaxZ)
p.hit = mean(max.z.present>z.cut & max.is.targ)
p.fa.present = mean(max.z.present>z.cut & !max.is.targ)
max.z.absent = apply(st.absent, 1, getMaxZ)
p.fa = mean(max.z.absent>z.cut)/6
return(data.frame(type="smart-simultaneous", cut, p.hit, p.fa, p.fa.present))
}
df.present = data.frame(max.strength=apply(st.present, 1, max),
max.is.target=apply(st.present, 1, which.max)==1)
df.absent = data.frame(max.strength=apply(st.absent, 1, max),
max.is.target=FALSE)
getPerfElim = function(cut){
present.over = df.present$max.strength>cut
# correct hit araises when max.strength over thresh, and max for trial is target
p.hit = mean(present.over & df.present$max.is.target)
p.fa.present = mean(present.over & !df.present$max.is.target)
# fa arises if max.strength for target absent is over
p.fa =  mean(df.absent$max.strength>cut)/6
return(data.frame(type="elimination", cut, p.hit, p.fa, p.fa.present))
}
n.cuts = 40
cuts.seq = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
cuts.elim = quantile(c(df.present$max.strength, df.absent$max.strength),
seq(0,1,length.out = n.cuts))
all.z = c(apply(st.present, 1, getMaxZ),
apply(st.absent, 1, getMaxZ))
cuts.z = quantile(all.z,
seq(0,1,length.out = n.cuts))
roc = rbind(do.call(rbind, lapply(cuts.seq, getPerfSeq)),
do.call(rbind, lapply(cuts.elim, getPerfElim)),
do.call(rbind, lapply(cuts.z, getPerfSmart)))
roc.graph <- ggplot(roc, aes(x=p.fa, y=p.hit, color=type))+
geom_line(size=0.5, alpha=0.5)+
geom_point(alpha=0.5)+
theme_bw()+
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=0.1))+
theme(legend.position = "top",
legend.title = element_blank(),
text=element_text(size=12))
print(roc.graph)
library(ggplot2)
df.present
str(df.present)
mean(df.present$max.strength[df$max.is.target])
mean(df.present$max.strength[df.present$max.is.target])
sd(df.present$max.strength[df.present$max.is.target])
r = sqrt(0.2)
d = 2*r/sqrt(1-r^2)
d
r
r
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
library(ggplot2)
k = 10000 # number of simulated trials in each present/absent condition
alternatives = 6
# generate "familiarities" of {alternatievs} items for {k} trials
d.prime = 2
# proportion of the familiarity variance that is "shared" by all items in a trial.
# if set very close to 0, advantage of smart-simultaneous goes away
# it will even do worse given the extra sample-variance of subtracted mean.
# (0 and 1 are illegal)
# simultaneous line up performance...
# gist here is:
# hit occurs IFF strength(target) > threshold AND strength(target) > strength(lure) for all lures
# p.hit = #hits/#target.present
# fa occurs if strength(lure) > threshold for any lure on a target absent trial.
# p.fa = #fa/#target.absent/6
getPerfSeq = function(cut){
present.over = st.present>cut
# correct hit arises when target is over threshold AND is max of all elements.
p.hit = mean(present.over[,1] & apply(st.present, 1, which.max)==1)
p.fa.present = mean(apply(present.over,1,sum)>0 & apply(st.present, 1, which.max)!=1)
absent.over = st.absent>cut
# fa arises if at least one stimulus in absent trial is over threshold
# divided by 6...
p.fa =  mean(apply(absent.over, 1, sum)>0)/6
return(data.frame(type="simultaneous", cut, p.hit, p.fa, p.fa.present))
}
n.cuts = 40
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime, rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = lapply(cuts, getPerfSeq)
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
rocs = rbind(rocs, this.roc)
}
this.roc
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
2*sqrt(1/(1-0.4))
rocs
n.cuts = 25
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime, rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
rocs = rbind(rocs, this.roc)
}
rocs
rocs
rownames(rocs)
this.roc
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime, rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
this.roc$thresh = rownames(this.roc)
rocs = rbind(rocs, this.roc)
}
rocs$thresh
rocs$thresh=="50%"
rocs
rocs$thresh
str(rocs$thresh)
stringr::str_match(rocs$thresh, "50")
stringr::str_match("50", rocs$thresh)
stringr::str_match(rocs$thresh, "50")
!is.na(stringr::str_match(rocs$thresh, "50"))
rocs[!is.na(stringr::str_match(rocs$thresh, "50")),]
tmp <- rocs[!is.na(stringr::str_match(rocs$thresh, "50")),]
qnorm(tmp$p.hit)-qnorm(tmp$p.fa)
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime*sqrt(1/(1-p.s.w)), rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
this.roc$thresh = rownames(this.roc)
rocs = rbind(rocs, this.roc)
}
roc.graph <- ggplot(rocs, aes(x=p.fa, y=p.hit, color=type))+
geom_line(size=0.5, alpha=0.5)+
geom_point(alpha=0.5)+
theme_bw()+
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=0.1))+
theme(legend.position = "top",
legend.title = element_blank(),
text=element_text(size=12))
print(roc.graph)
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime*sqrt(1-p.s.w), rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
this.roc$thresh = rownames(this.roc)
rocs = rbind(rocs, this.roc)
}
roc.graph <- ggplot(rocs, aes(x=p.fa, y=p.hit, color=type))+
geom_line(size=0.5, alpha=0.5)+
geom_point(alpha=0.5)+
theme_bw()+
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=0.1))+
theme(legend.position = "top",
legend.title = element_blank(),
text=element_text(size=12))
print(roc.graph)
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime/sqrt(1-p.s.w), rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
this.roc$thresh = rownames(this.roc)
rocs = rbind(rocs, this.roc)
}
roc.graph <- ggplot(rocs, aes(x=p.fa, y=p.hit, color=type))+
geom_line(size=0.5, alpha=0.5)+
geom_point(alpha=0.5)+
theme_bw()+
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=0.1))+
theme(legend.position = "top",
legend.title = element_blank(),
text=element_text(size=12))
print(roc.graph)
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime*sqrt(1-p.s.w), rep(0, alternatives-1)), each=k), ncol=alternatives)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(st.absent, st.present),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
this.roc$thresh = rownames(this.roc)
rocs = rbind(rocs, this.roc)
}
roc.graph <- ggplot(rocs, aes(x=p.fa, y=p.hit, color=type))+
geom_line(size=0.5, alpha=0.5)+
geom_point(alpha=0.5)+
theme_bw()+
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,by=0.1))+
theme(legend.position = "top",
legend.title = element_blank(),
text=element_text(size=12))
print(roc.graph)
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.best.corr.R')
st.present
str(st.present)
rowsum(st.present)
rowsums(st.present)
mapply(sum, 1, st.present)
str(mapply(sum, 1, st.present))
str(st.present)
mapply(sum, st.present, 1)
mapply(sum, st.present)
str(st.present)
str(mapply(sum, st.present))
vapply(st.present, sum)
?mapply
apply(st.present, 1, sum)
str(apply(st.present, 1, sum))
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
vars = c()
rocs = data.frame()
for(p.s.w in c(0, 0.2, 0.4, 0.6, 0.8)){
st.present = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives) +
matrix(rep(c(d.prime, rep(0, alternatives-1)), each=k), ncol=alternatives)
# d.prime*sqrt(1-p.s.w)
st.absent = matrix(rnorm(alternatives*k,
rep(rnorm(k,0,sqrt(p.s.w)), alternatives),
sqrt(1-p.s.w)),
ncol = alternatives)
cuts = quantile(c(apply(st.absent, 1, sum), apply(st.present, 1, sum)),
seq(0,1,length.out=n.cuts))
this.roc = do.call(rbind, lapply(cuts, getPerfSeq))
this.roc$type = sprintf('r^2=%0.2f',p.s.w)
this.roc$thresh = rownames(this.roc)
rocs = rbind(rocs, this.roc)
vars = c(vars, var(apply(st.absent, 1, sum)))
}
vars
6+0.8*30
6+c(0, 0.2, 0.4, 0.6, 0.8)*30
source('~/ACADEMIC/Students/Killeen-Isabella/roc.weird.corr.R')
setwd('~/PROJECTS/multicolor-binding/github/ColorBinding/Colorbinding_cory/colorbindingCory/data/R/')
source('~/PROJECTS/multicolor-binding/github/ColorBinding/Colorbinding_cory/colorbindingCory/data/R/modelAna.ev.R')
source('~/PROJECTS/multicolor-binding/github/ColorBinding/Colorbinding_cory/colorbindingCory/data/R/modelAna.ev.R')
